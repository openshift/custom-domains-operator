#!/usr/bin/env bash

# WARNING: THIS FILE IS MANAGED IN THE 'boilerplate' REPO AND COPIED TO OTHER REPOSITORIES.
# ONLY EDIT THIS FILE FROM WITHIN THE 'boilerplate' REPOSITORY.
# 
# TO OPT OUT OF UPDATES, SEE THE README.

# This script updates itself, and then re-execs itself if it has
# changed. This is in case updates to conventions rely on updates to this
# script.

set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

# Were we re-exec'd?
if [ "$1" ]; then
  OUT=$1
  # Let's make sure this was really a re-exec and not some other
  # weirdness.
  if ! [[ -d "$OUT" ]] || ! diff -q "$0" "$OUT/boilerplate/update"; then
    echo "Something went wrong! I was invoked with '$OUT'!"
    exit 2
  fi
else
  if [ -z "$BOILERPLATE_GIT_REPO" ]; then
    BOILERPLATE_GIT_REPO=git@gitlab.cee.redhat.com:service/boilerplate.git
  fi
  if [ -z "$BOILERPLATE_GIT_CLONE" ]; then
    BOILERPLATE_GIT_CLONE="git clone $BOILERPLATE_GIT_REPO"
  fi
  OUT="$(mktemp -d)"
  $BOILERPLATE_GIT_CLONE "${OUT}"
  echo "Updating the update script."
  cp --preserve=mode "${OUT}/boilerplate/update" "$0"
  echo "Copying utilities"
  cp --preserve=mode -r ${OUT}/boilerplate/_* $DIR
  echo "Reinvoking..."
  echo ""
  exec "$0" "$OUT"
  # unreached
fi

trap "rm -fr $OUT" EXIT

# The directory in which this script lives is the CONVENTION_ROOT. Export
# this for individual `update` scripts.
export CONVENTION_ROOT=$DIR

# Allow this to be overridden by the environment, in case some bizarre
# repo doesn't have an `origin` remote.
if [ -z "$REPO_NAME" ]; then
  # This is a tad ambitious, but it should usually work.
  export REPO_NAME=$(git remote get-url origin | sed 's,.*/,,; s/\.git$//')
fi

export REPO_ROOT=$(git rev-parse --show-toplevel)

CONFIG_FILE="${DIR}/update.cfg"
README="https://gitlab.cee.redhat.com/service/boilerplate/blob/master/README.md"

if [ ! -f "$CONFIG_FILE" ]; then
  echo "$CONFIG_FILE not found."
  echo "This file is required in order to select which features to include." 
  echo "See $README for more details."
  exit 1
fi

while read directory junk; do
  # Skip comment lines (which can have leading whitespace)
  if [[ "$directory" == '#'* ]]; then
    continue
  fi
  # Skip blank or whitespace-only lines
  if [[ "$directory" == "" ]]; then
    continue
  fi
  # Lines like
  #    valid/path  other_junk
  # are not acceptable, unless `other_junk` is a comment
  if [[ "$junk" != "" ]] && [[ "$junk" != '#'* ]]; then
    echo "Invalid config! Only one directory is allowed per line. Found '$junk'"
    exit 1
  fi

  dir_path="${OUT}/boilerplate/${directory}"
  # Make sure the directory exists
  if ! [[ -d "$dir_path" ]]; then
    echo "Invalid convention directory: '$directory'"
    exit 1
  fi

  echo "***********************************************************************************"
  echo "$directory is configured in update.cfg."
  echo "-----------------------------------------------------------------------------------"
  echo "syncing files from source."
  if [ -f "${dir_path}/update" ]; then
    # Always run the *new* update script
    mkdir -p "${DIR}/${directory}"
    cp --preserve=mode "${dir_path}/update" "${DIR}/${directory}"
    echo "executing ${DIR}/${directory}/update PRE"
    "${DIR}/${directory}/update" PRE
  fi
  rm -rf "${DIR}/${directory}"
  mkdir -p $(dirname "${DIR}/${directory}")
  cp --preserve=mode -r "$dir_path" "${DIR}/${directory}"
  if [ -f "${DIR}/${directory}/update" ]; then
    echo "executing ${DIR}/${directory}/update POST"
    "${DIR}/${directory}/update" POST
  fi
  echo "***********************************************************************************"
  echo ""
done < "$CONFIG_FILE"

# If all that went well, lay down the last_boilerplate_commit file,
# which allows freeze_check to work.
echo "Registering commit hash..."
mkdir -p ${DIR}/_data
bp_commit=$(cd ${OUT} && git rev-parse HEAD)
echo ${bp_commit} > ${DIR}/_data/last_boilerplate_commit
echo "Done"
